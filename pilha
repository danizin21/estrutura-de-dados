#include<stdio.h>
#include<stdlib.h>
typedef struct elemento{
    int info;
    struct elemento *prox;

}Elemento;

typedef struct pilha{
Elemento *prim;
}Pilha;

Pilha* criar_pilha(void){
Pilha*p=(Pilha*)malloc(sizeof(Pilha));
p->prim=NULL;
return p;
}
int Pilha_vazia(Pilha *p){
    if(p->prim==0){
        return 1;
    }else
    {
        return 0;
    }
}

void Pilha_push(Pilha *p,int v){
Elemento *n=(Elemento*)malloc(sizeof(Elemento));
n->info=v;
n->prox=p->prim;
p->prim=n;
}
char Pilha_pop(Pilha *p){
    Elemento* t;
    float v;
    if(Pilha_vazia(p)) exit(1);
    t=p->prim;
    v=t->info;
    p->prim=t->prox;
    free(t);
    return v;
}

char fecho(char c) {
if(c=='}') return '{';
if(c==']') return '[';
if(c==')') return '(';
}

int verifica(char* exp) {
Pilha* p=criar_pilha();
int i;
for(i=0; exp[i]!='\0'; i++)
{
if(exp[i]=='{'||exp[i]=='['||exp[i]=='(')
Pilha_push(p,exp[i]);
else if(exp[i]=='}'||exp[i]==']'||exp[i]==')')
{
if(Pilha_vazia(p)) return 0;
if(Pilha_pop(p)!=fecho(exp[i])) return 0;
}
}
if(!Pilha_vazia(p)) return 0;
void pilha_libera(Pilha *p);
return 1;
}

int main(){
    char *exp="[2+3)";
    int resultado= verifica(exp);

    if (resultado==1)
    {
        printf("expressao correta\n");
    }else
    {
        printf("expressao incorreta\n");
    }
    
    
    return 0;
}
